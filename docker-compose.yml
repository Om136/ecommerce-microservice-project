services:
  client:
    build: ./client
    ports:
      - "8081:8080"
    depends_on:
      - api-gateway

  api-gateway:
    build: ./api-gateway
    ports:
      - "3010:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - auth-service
      - user-service
      - product-service
      - cart-service
      - order-service
    command: node server.js  # Simplified command

  # User Service with dedicated database
  user-db:
    image: mysql:8.0
    ports:
      - "3302:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=user_db
    volumes:
      - user-db-data:/var/lib/mysql
      - ./db-init/user:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
      
  user-service:
    build: ./user-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DB_HOST=user-db
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_NAME=user_db
      - DB_PORT=3306
      - JWT_SECRET=${JWT_SECRET}
      - RETRY_CONNECT=10
    depends_on:
      user-db:
        condition: service_healthy
    command: node server.js  # Simplified command
    restart: on-failure

  # Auth Service (no dedicated database, uses user-db)
  auth-service:
    build: ./auth-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=user-db
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_NAME=user_db
      - DB_PORT=3306
      - JWT_SECRET=${JWT_SECRET}
      - RETRY_CONNECT=10
    depends_on:
      user-db:
        condition: service_healthy
    command: node server.js  # Simplified command
    restart: on-failure

  # Product Service with dedicated database
  product-db:
    image: mysql:8.0
    ports:
      - "3303:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=product_db
    volumes:
      - product-db-data:/var/lib/mysql
      - ./db-init/product:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
      
  product-service:
    build: ./product-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DB_HOST=product-db
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_NAME=product_db
      - DB_PORT=3306
      - RETRY_CONNECT=10
    volumes:
      - product-uploads:/app/uploads
    depends_on:
      product-db:
        condition: service_healthy
    command: node server.js  # Simplified command
    restart: on-failure

  # Cart Service with dedicated database
  cart-db:
    image: mysql:8.0
    ports:
      - "3304:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=cart_db
    volumes:
      - cart-db-data:/var/lib/mysql
      - ./db-init/cart:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
      
  cart-service:
    build: ./cart-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - DB_HOST=cart-db
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_NAME=cart_db
      - DB_PORT=3306
      - RETRY_CONNECT=10
    depends_on:
      cart-db:
        condition: service_healthy
    command: node server.js  # Simplified command
    restart: on-failure

  # Order Service with dedicated database
  order-db:
    image: mysql:8.0
    ports:
      - "3305:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=order_db
    volumes:
      - order-db-data:/var/lib/mysql
      - ./db-init/order:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
      
  order-service:
    build: ./order-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - DB_HOST=order-db
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_NAME=order_db
      - DB_PORT=3306
      - RETRY_CONNECT=10
    depends_on:
      order-db:
        condition: service_healthy
    command: node server.js  # Simplified command
    restart: on-failure

  # Keep prometheus, grafana configurations unchanged
  prometheus:
    image: prom/prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

volumes:
  user-db-data:
  product-db-data:
  cart-db-data:
  order-db-data:
  product-uploads: